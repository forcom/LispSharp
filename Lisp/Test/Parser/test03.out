((define (append list1 list2) (if (null? list1) list2 (cons (car list1) (append (cdr list1) list2)))) (define (looknsayseq x seq) (display seq) (newline) (cond ((> x 1) (looknsayseq (- x 1) (make-seq seq))))) (define (make-seq cur-seq) (make-seq-iter (car cur-seq) 1 (cdr cur-seq))) (define (make-seq-iter num count seq) (cond ((null? seq) (list num count)) ((= (car seq) num) (make-seq-iter num (+ count 1) (cdr seq))) (else (append (list num count) (make-seq-iter (car seq) 1 (cdr seq)))))) (looknsayseq 10 (list 1)))

define : [Lisp.Symbol]
append : [Lisp.Symbol]
list1 : [Lisp.Symbol]
list2 : [Lisp.Symbol]
if : [Lisp.Symbol]
null? : [Lisp.Symbol]
list1 : [Lisp.Symbol]
list2 : [Lisp.Symbol]
cons : [Lisp.Symbol]
car : [Lisp.Symbol]
list1 : [Lisp.Symbol]
append : [Lisp.Symbol]
cdr : [Lisp.Symbol]
list1 : [Lisp.Symbol]
list2 : [Lisp.Symbol]
define : [Lisp.Symbol]
looknsayseq : [Lisp.Symbol]
x : [Lisp.Symbol]
seq : [Lisp.Symbol]
display : [Lisp.Symbol]
seq : [Lisp.Symbol]
newline : [Lisp.Symbol]
cond : [Lisp.Symbol]
> : [Lisp.Symbol]
x : [Lisp.Symbol]
1 : [System.Int64]
looknsayseq : [Lisp.Symbol]
- : [Lisp.Symbol]
x : [Lisp.Symbol]
1 : [System.Int64]
make-seq : [Lisp.Symbol]
seq : [Lisp.Symbol]
define : [Lisp.Symbol]
make-seq : [Lisp.Symbol]
cur-seq : [Lisp.Symbol]
make-seq-iter : [Lisp.Symbol]
car : [Lisp.Symbol]
cur-seq : [Lisp.Symbol]
1 : [System.Int64]
cdr : [Lisp.Symbol]
cur-seq : [Lisp.Symbol]
define : [Lisp.Symbol]
make-seq-iter : [Lisp.Symbol]
num : [Lisp.Symbol]
count : [Lisp.Symbol]
seq : [Lisp.Symbol]
cond : [Lisp.Symbol]
null? : [Lisp.Symbol]
seq : [Lisp.Symbol]
list : [Lisp.Symbol]
num : [Lisp.Symbol]
count : [Lisp.Symbol]
= : [Lisp.Symbol]
car : [Lisp.Symbol]
seq : [Lisp.Symbol]
num : [Lisp.Symbol]
make-seq-iter : [Lisp.Symbol]
num : [Lisp.Symbol]
+ : [Lisp.Symbol]
count : [Lisp.Symbol]
1 : [System.Int64]
cdr : [Lisp.Symbol]
seq : [Lisp.Symbol]
else : [Lisp.Symbol]
append : [Lisp.Symbol]
list : [Lisp.Symbol]
num : [Lisp.Symbol]
count : [Lisp.Symbol]
make-seq-iter : [Lisp.Symbol]
car : [Lisp.Symbol]
seq : [Lisp.Symbol]
1 : [System.Int64]
cdr : [Lisp.Symbol]
seq : [Lisp.Symbol]
looknsayseq : [Lisp.Symbol]
10 : [System.Int64]
list : [Lisp.Symbol]
1 : [System.Int64]